# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui_client.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import QMessageBox
from hash_generator import Ui_Dialog
from PyQt5 import QtCore, QtGui, QtWidgets
from NetworkConnection.client import Client
from Crypto.PublicKey import RSA
import importlib
from Crypto.Hash import SHA256
from Crypto.Signature import pkcs1_15
from Crypto.Cipher import AES, PKCS1_OAEP
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad
import os
import os.path
from base64 import b64encode


class Ui_MainWindow(object):
    def __init__(self):
        self.fio = None

    def setupUi(self, MainWindow, argv):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(754, 593)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.fioEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.fioEdit.setGeometry(QtCore.QRect(100, 20, 351, 20))
        self.fioEdit.setObjectName("fioEdit")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 20, 61, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.approveButton = QtWidgets.QPushButton(self.centralwidget)
        self.approveButton.setGeometry(QtCore.QRect(480, 20, 151, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.approveButton.setFont(font)
        self.approveButton.setObjectName("approveButton")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(100, 80, 181, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.createDESButton = QtWidgets.QPushButton(self.centralwidget)
        self.createDESButton.setGeometry(QtCore.QRect(480, 50, 151, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.createDESButton.setFont(font)
        self.createDESButton.setObjectName("createDESButton")
        self.questionLabel = QtWidgets.QLabel(self.centralwidget)
        self.questionLabel.setGeometry(QtCore.QRect(434, 170, 281, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.questionLabel.setFont(font)
        self.questionLabel.setObjectName("questionLabel")
        self.yesBox = QtWidgets.QCheckBox(self.centralwidget)
        self.yesBox.setGeometry(QtCore.QRect(430, 210, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.yesBox.setFont(font)
        self.yesBox.setObjectName("yesBox")
        self.noBox = QtWidgets.QCheckBox(self.centralwidget)
        self.noBox.setGeometry(QtCore.QRect(430, 240, 141, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.noBox.setFont(font)
        self.noBox.setObjectName("noBox")
        self.voteButton = QtWidgets.QPushButton(self.centralwidget)
        self.voteButton.setGeometry(QtCore.QRect(430, 270, 201, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.voteButton.setFont(font)
        self.voteButton.setObjectName("voteButton")
        self.updateButton = QtWidgets.QPushButton(self.centralwidget)
        self.updateButton.setGeometry(QtCore.QRect(40, 370, 321, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.updateButton.setFont(font)
        self.updateButton.setObjectName("updateButton")
        self.resultLabel = QtWidgets.QLabel(self.centralwidget)
        self.resultLabel.setGeometry(QtCore.QRect(430, 320, 201, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.resultLabel.setFont(font)
        self.resultLabel.setObjectName("resultLabel")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(70, 110, 256, 191))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.listWidget.setFont(font)
        self.listWidget.setObjectName("listWidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 754, 18))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        ####################################
        #           user code
        ####################################

        self.fio = ""
        if len(argv) > 1:
            print(argv[1])
            self.client = Client(argv[1])
        else:
            self.client = Client()
        self.passphrase = "NiktoNeUgadaet"
        self.public_key = b""

        self.approveButton.clicked.connect(self.get_fio)
        self.updateButton.clicked.connect(self.update_info)
        self.createDESButton.clicked.connect(self.create_des)
        self.voteButton.clicked.connect(self.vote)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Client"))
        self.label.setText(_translate("MainWindow", "Твое ФИО"))
        self.approveButton.setText(_translate("MainWindow", "Подтвердить"))
        self.label_2.setText(_translate("MainWindow", "Участники голосования"))
        self.createDESButton.setText(_translate("MainWindow", "Создать Ключи ЭЦП"))
        self.questionLabel.setText(_translate("MainWindow", "Вопрос голосования"))
        self.yesBox.setText(_translate("MainWindow", " Да"))
        self.noBox.setText(_translate("MainWindow", " Нет"))
        self.voteButton.setText(_translate("MainWindow", "Press F to Vote"))
        self.updateButton.setText(_translate("MainWindow", "Обновить информацию"))
        self.resultLabel.setText(_translate("MainWindow", "Победил ответ...."))

    def get_fio(self):
        self.fio = self.fioEdit.text().lower()
        response = self.client.check_user(self.fio)
        q = QMessageBox()
        q.setText(response)
        q.exec()


    def update_info(self):
        response = self.client.update_info()
        if response["public_key"]:
            with open("server_public_key_on_client", "wb") as f:
                f.write(response["public_key"].encode())
        if response["voters"]:
            self.listWidget.clear()
            for voter in response["voters"]:
                self.listWidget.addItem(voter.upper())
        if response["question"]:
            self.questionLabel.setText(response["question"])
        else:
            self.questionLabel.setText("Увы, сегодня без выборов...")

    def create_des(self):
        if self.fio == "":
            print("enter fio!!!!")
            return

        response = self.client.check_user(self.fio)
        if response == "user exists":
            q = QMessageBox()
            q.setText(response)
            q.exec()
        else:

            if not os.path.exists(f'./client_{self.fio}_private_key') or not os.path.exists(f'./client_{self.fio}_public_key'):
                key = RSA.generate(1024, os.urandom)
                with open(f'./client_{self.fio}_private_key', "wb") as f:
                    f.write(key.export_key('PEM', passphrase=self.passphrase + self.fio))
                with open(f'./client_{self.fio}_public_key', "wb") as f:
                    f.write(key.public_key().export_key('PEM'))

            with open(f'./client_{self.fio}_public_key', "rb") as f:
                self.public_key = RSA.import_key(f.read())
            print(self.public_key)
            self.client.add_user(self.fio, self.public_key.export_key("PEM").decode())


    def vote(self):
        can_vote = False
        for i in range(0, self.listWidget.count()):
            if str(self.fio).upper() == self.listWidget.item(i).text():
                can_vote = True
        if not can_vote:
            q = QMessageBox()
            q.setText(f'User {str(self.fio).upper()} doesnt participate in voting')
            q.exec()
            return
        if self.noBox.isChecked() and self.yesBox.isChecked():
            self.client.bye()
        elif self.noBox.isChecked():
            encrypted_vote = self.cipher(False)
            encrypted_vote["fio"] = self.fio
            encrypted_vote["question"] = self.questionLabel.text()
            self.client.vote(encrypted_vote)
        elif self.yesBox.isChecked():
            encrypted_vote = self.cipher(True)
            encrypted_vote["fio"] = self.fio
            encrypted_vote["question"] = self.questionLabel.text()
            self.client.vote(encrypted_vote)
        else:
            self.client.bye()

    def cipher(self, vote):
        private_key = 0
        server_public_key = 0
        if self.fio == "":
            print("enter fio!!!!")
            return

        with open(f'./client_{self.fio}_private_key', "rb") as f:
            private_key = RSA.import_key(f.read(), passphrase=self.passphrase + self.fio)
        with open("./server_public_key_on_client", "rb") as f:
            server_public_key = RSA.import_key(f.read())
        hash_obj = SHA256.new(str(vote).encode())
        sign = pkcs1_15.new(private_key).sign(hash_obj)
        print(f'sign {sign}')
        session_key = get_random_bytes(16)
        aes = AES.new(session_key, AES.MODE_CBC)
        encrypted_bytes = aes.encrypt(pad(str(vote).encode(), AES.block_size))
        rsa_cipher = PKCS1_OAEP.new(server_public_key)
        encrypted_session_key = rsa_cipher.encrypt(session_key)
        print(f'iv: {aes.iv}')
        print(f'encrypted_bytes: {encrypted_bytes}')
        print(f'session_key: {session_key}')
        encrypted_vote = {}
        encrypted_vote["sign"] = b64encode(sign).decode()
        encrypted_vote["encrypted_bytes"] = b64encode(encrypted_bytes).decode()
        encrypted_vote["encrypted_session_key"] = b64encode(encrypted_session_key).decode()
        encrypted_vote["iv"] = b64encode(aes.iv).decode()
        return encrypted_vote




if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow, sys.argv)
    MainWindow.show()
    sys.exit(app.exec_())
